---
import IconLink from "~icons/fa6-solid/link";
import IconCode from "~icons/fa6-solid/code";

const { logo, url, git, bg } = Astro.props;
---

<div class={`card group ${bg}`}>
    <div class="content group">
        <img src={logo} class="h-12 w-max" />
        <slot />
    </div>
    <div
        class="flex flex-col sm:flex-row gap-x-4 gap-y-2 sm:gap-y-0 absolute z-40 bottom-6 left-6 md:left-auto right-6 justify-between sm:justify-start md:right-6"
    >
        {
            url ? (
                <a href={url} class="card-button">
                    <IconLink class="mt-[0.175rem]" />
                    <p>Visit Website</p>
                </a>
            ) : null
        }
        {
            git ? (
                <a href={git} class="card-button">
                    <IconCode class="mt-[0.175rem]" />
                    <p>Git Repository</p>
                </a>
            ) : null
        }
    </div>
</div>

<style>
    .card {
        @apply relative h-min rounded-2xl bg-surface2 bg-opacity-30 bg-cover bg-center transition duration-500 ease-in-out hover:scale-[1.0125];
    }

    #cards:hover > .card::after {
        opacity: 1;
    }

    .card:hover::before {
        opacity: 1;
    }

    .card::before,
    .card::after {
        border-radius: inherit;
        content: "";
        transition: opacity 450ms;
        @apply absolute left-0 top-0 z-30 h-full w-full opacity-0;
    }

    .card::before {
        background: radial-gradient(
            50rem circle at var(--mouse-x) var(--mouse-y),
            rgba(255, 255, 255, 0.06),
            transparent 40%
        );
        @apply z-30;
    }

    .card > .content {
        @apply relative z-20 flex h-fit flex-col gap-y-8 rounded-[0.8rem] border border-surface0 bg-gradient-to-br from-[rgb(30,30,46)] via-[rgba(30,30,46,0.9)] to-transparent p-8 pb-16 backdrop-blur-sm backdrop-brightness-50 md:bg-gradient-to-r md:pb-8 lg:backdrop-blur-0 lg:backdrop-brightness-75;
    }

    .tech-icon {
        @apply h-6 transition duration-500 ease-in-out;
    }

    .card-button {
        background-size: 250%;
        background-image: linear-gradient(
            to right,
            #1e1e2e 0%,
            #1e1e2e 50%,
            #885db3 60%,
            #7663b0 100%
        );
        @apply inline-flex gap-x-2 rounded-lg border border-surface0 px-4 py-2 shadow-xl transition-all duration-500 ease-in-out;
    }

    .card-button:hover {
        background-position: right center;
    }

    .card-button > p {
        @apply font-semibold text-subtext1 transition-all duration-500 ease-in-out hover:text-text;
    }
</style>

<script>
    document.getElementById("cards")!.onmousemove = (e) => {
        for (const card of document.getElementsByClassName(
            "card"
        ) as HTMLCollectionOf<HTMLElement>) {
            const rect = card.getBoundingClientRect(),
                x = e.clientX - rect.left,
                y = e.clientY - rect.top;

            card.style.setProperty("--mouse-x", `${x}px`);
            card.style.setProperty("--mouse-y", `${y}px`);
        }
    };
</script>
